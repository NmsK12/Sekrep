/**
 * Servicio de cach√© para almacenar datos de consultas
 */

const fs = require('fs');
const path = require('path');

class CacheService {
  constructor() {
    this.cacheDir = path.join(__dirname, '..', 'cache');
    this.ensureCacheDir();
  }

  ensureCacheDir() {
    if (!fs.existsSync(this.cacheDir)) {
      fs.mkdirSync(this.cacheDir, { recursive: true });
      console.log('üìÅ Directorio de cach√© creado:', this.cacheDir);
    }
  }

  // Generar clave √∫nica para el cach√© basada en DNI
  getCacheKey(dni) {
    return `dni_${dni}.json`;
  }

  // Generar clave para b√∫squeda por tel√©fono
  getPhoneCacheKey(telefono) {
    return `phone_${telefono}.json`;
  }

  // Generar clave para b√∫squeda por nombre
  getNameCacheKey(nombres) {
    const cleanName = nombres.toLowerCase().replace(/[^a-z0-9]/g, '_');
    return `name_${cleanName}.json`;
  }

  // Guardar datos en cach√©
  saveToCache(key, data) {
    try {
      const cacheFile = path.join(this.cacheDir, key);
      const cacheData = {
        ...data,
        cached_at: new Date().toISOString(),
        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() // 24 horas
      };
      
      fs.writeFileSync(cacheFile, JSON.stringify(cacheData, null, 2));
      console.log(`üíæ Datos guardados en cach√©: ${key}`);
      return true;
    } catch (error) {
      console.error('‚ùå Error guardando en cach√©:', error.message);
      return false;
    }
  }

  // Leer datos del cach√©
  getFromCache(key) {
    try {
      const cacheFile = path.join(this.cacheDir, key);
      
      if (!fs.existsSync(cacheFile)) {
        return null;
      }

      const cacheData = JSON.parse(fs.readFileSync(cacheFile, 'utf8'));
      
      // NO verificar expiraci√≥n - el cach√© nunca expira
      console.log(`üìñ Datos obtenidos del cach√©: ${key}`);
      return cacheData;
    } catch (error) {
      console.error('‚ùå Error leyendo cach√©:', error.message);
      return null;
    }
  }

  // Eliminar del cach√©
  deleteFromCache(key) {
    try {
      const cacheFile = path.join(this.cacheDir, key);
      if (fs.existsSync(cacheFile)) {
        fs.unlinkSync(cacheFile);
        console.log(`üóëÔ∏è Cach√© eliminado: ${key}`);
      }
    } catch (error) {
      console.error('‚ùå Error eliminando cach√©:', error.message);
    }
  }

  // Buscar en cach√© por tel√©fono
  searchByPhone(telefono) {
    try {
      const files = fs.readdirSync(this.cacheDir);
      
      for (const file of files) {
        if (file.startsWith('dni_') && file.endsWith('.json')) {
          const cacheFile = path.join(this.cacheDir, file);
          const cacheData = JSON.parse(fs.readFileSync(cacheFile, 'utf8'));
          
          // NO verificar expiraci√≥n - el cach√© nunca expira

          // Buscar el tel√©fono en los datos
          if (cacheData.data && cacheData.data.telefonos) {
            const foundPhone = cacheData.data.telefonos.find(t => 
              t.telefono === telefono || t.telefono.includes(telefono)
            );
            
            if (foundPhone) {
              console.log(`üì± Tel√©fono encontrado en cach√©: ${telefono} -> DNI: ${cacheData.data.dni}`);
              return cacheData;
            }
          }
        }
      }
      
      return null;
    } catch (error) {
      console.error('‚ùå Error buscando por tel√©fono:', error.message);
      return null;
    }
  }

  // Buscar en cach√© por tel√©fono (m√∫ltiples resultados)
  searchByPhoneMultiple(telefono) {
    try {
      const files = fs.readdirSync(this.cacheDir);
      const resultados = [];
      
      for (const file of files) {
        if (file.startsWith('dni_') && file.endsWith('.json')) {
          const cacheFile = path.join(this.cacheDir, file);
          const cacheData = JSON.parse(fs.readFileSync(cacheFile, 'utf8'));
          
          // NO verificar expiraci√≥n - el cach√© nunca expira

          // Buscar el tel√©fono en los datos
          if (cacheData.data && cacheData.data.telefonos) {
            const foundPhone = cacheData.data.telefonos.find(t => 
              t.telefono === telefono || t.telefono.includes(telefono)
            );
            
            if (foundPhone) {
              console.log(`üì± Tel√©fono encontrado en cach√©: ${telefono} -> DNI: ${cacheData.data.dni}`);
              resultados.push(cacheData);
            }
          }
        }
      }
      
      return resultados;
    } catch (error) {
      console.error('‚ùå Error buscando por tel√©fono m√∫ltiple:', error.message);
      return [];
    }
  }

  // Buscar en cach√© por nombre
  searchByName(nombres) {
    try {
      const files = fs.readdirSync(this.cacheDir);
      const results = [];
      
      for (const file of files) {
        if (file.startsWith('dni_') && file.endsWith('.json')) {
          const cacheFile = path.join(this.cacheDir, file);
          const cacheData = JSON.parse(fs.readFileSync(cacheFile, 'utf8'));
          
          // NO verificar expiraci√≥n - el cach√© nunca expira

          // Buscar coincidencias en el nombre
          if (cacheData.data && cacheData.data.nombre) {
            const nombreCompleto = cacheData.data.nombre.toLowerCase();
            const nombresBusqueda = nombres.toLowerCase();
            
            // Buscar coincidencias parciales
            if (nombreCompleto.includes(nombresBusqueda) || 
                nombresBusqueda.split(' ').some(nombre => nombreCompleto.includes(nombre))) {
              results.push(cacheData);
            }
          }
        }
      }
      
      if (results.length > 0) {
        console.log(`üë§ ${results.length} resultados encontrados en cach√© para: ${nombres}`);
      }
      
      return results;
    } catch (error) {
      console.error('‚ùå Error buscando por nombre:', error.message);
      return [];
    }
  }


  // Obtener estad√≠sticas del cach√©
  getCacheStats() {
    try {
      const files = fs.readdirSync(this.cacheDir);
      let total = 0;
      
      for (const file of files) {
        if (file.endsWith('.json')) {
          total++;
        }
      }
      
      return {
        total,
        valid: total, // Todos son v√°lidos porque nunca expiran
        expired: 0,   // Nunca hay expirados
        cacheDir: this.cacheDir,
        note: "El cach√© nunca expira - todos los datos se mantienen permanentemente"
      };
    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas:', error.message);
      return { total: 0, valid: 0, expired: 0, cacheDir: this.cacheDir };
    }
  }
}

module.exports = CacheService;
